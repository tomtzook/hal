import groovy.transform.Field

plugins {
    id 'maven-publish'
    id 'signing'
}

apply from: rootProject.file('extras.gradle')

group = GROUP
version = VERSION

@Field String BASE_OUTPUT_PATH_FORMAT = 'build/cmake/libhaljni_%s.so'
@Field List<String> ALL_KNOWN_INTERFACES = ["bbb", "dummy"]

@Field String CURRENT_INTERFACES = ""
if (project.hasProperty("ALL_INTERFACES")) {
    CURRENT_INTERFACES = ALL_KNOWN_INTERFACES.join(";")
} else {
    if (project.hasProperty('HAL_INTERFACE')) {
        CURRENT_INTERFACES = project.property('HAL_INTERFACE')
    } else {
        println 'Using DUMMY interface (interfaces/dummy)'
        CURRENT_INTERFACES = "dummy"
    }
}

ext.CMAKE_PROPERTIES = "-DHAL_INTERFACE=${CURRENT_INTERFACES}"
ext.CMAKE_FILE = project.file('src/CMakeLists.txt')

apply from: rootProject.file('cmake.gradle')

tasks.buildNatives.dependsOn project(':halc').tasks.build
tasks.build.dependsOn tasks.buildNatives
tasks.clean.dependsOn tasks.deleteBuildDirectory

Task createZipTaskForHalInterface(String halInterfaceName, String compiledPath) {
    return tasks.create("jniZip${halInterfaceName.capitalize()}", Zip) {
        dependsOn tasks.buildNatives

        archiveFile.set(project.file("${project.buildDir}/haljni-${halInterfaceName}.zip"))
        archiveClassifier.set(halInterfaceName)

        from compiledPath
        rename ".*", "libhaljni.so"
    };
}

List<Task> createZipTasksForDefinedInterfaces() {
    List<Task> tasks = new ArrayList<>();

    String[] interfaces = CURRENT_INTERFACES.split(";")
    for (String interfaceName : interfaces) {
        Task task = createZipTaskForHalInterface(interfaceName,
                String.format(Locale.ENGLISH, BASE_OUTPUT_PATH_FORMAT, interfaceName))

        tasks.add(task);
    }

    return tasks;
}

task zipNatives {
    dependsOn createZipTasksForDefinedInterfaces()
}
tasks.build.dependsOn zipNatives

List<Map<String, String>> createPublishingMaps() {
    List<Map<String, String>> maps = new ArrayList<>();

    String[] interfaces = CURRENT_INTERFACES.split(";")
    for (String interfaceName : interfaces) {
        maps.add([source: "${project.buildDir}/haljni-${interfaceName}.zip",
                  classifier: interfaceName,
                  extension: 'zip'])
    }

    return maps;
}

ext.PUBLISHING_MAPS = createPublishingMaps()

publishing {
    publications {
        mavenHalJni(MavenPublication) {
            artifactId 'halj-jni'
            for (Map<String, String> map : PUBLISHING_MAPS) {
                artifact map
            }

            pom {
                name = 'haljni'
                description = "HAL JNI"
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_MAIL
                    }
                }

                scm {
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                    url = POM_URL
                }
            }
        }
    }

    repositories {
        maven {
            if (isReleaseBuild()) {
                name = 'NexusStaging'
                url = NEXUS_RELEASE_REPOSITORY_URL
            } else {
                name = 'NexusSnapshot'
                url = NEXUS_SNAPSHOT_REPOSITORY_URL
            }

            credentials {
                username getNexusUsername()
                password getNexusPassword()
            }
        }
    }
}

if (shouldSign()) {
    signing {
        sign publishing.publications.mavenHalJni
    }
}
