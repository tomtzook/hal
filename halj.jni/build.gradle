import groovy.transform.Field

@Field String BASE_OUTPUT_PATH_FORMAT = 'build/cmake/libhaljni_%s.so'
@Field List<String> ALL_KNOWN_INTERFACES = ["bbb", "dummy"]

@Field String CURRENT_INTERFACES = ""
if (project.hasProperty("ALL_INTERFACES")) {
    CURRENT_INTERFACES = ALL_KNOWN_INTERFACES.join(";")
} else {
    if (project.hasProperty('HAL_INTERFACE')) {
        CURRENT_INTERFACES = project.property('HAL_INTERFACE')
    } else {
        println 'Using DUMMY interface (interfaces/dummy)'
        CURRENT_INTERFACES = "dummy"
    }
}

ext.CMAKE_PROPERTIES = "-DHAL_INTERFACE=${CURRENT_INTERFACES}"
ext.CMAKE_FILE = project.file('src/CMakeLists.txt')

apply from: rootProject.file('cmake.gradle')

task build {
    dependsOn project(':halc').tasks.build, tasks.buildNatives
}

task clean {
    dependsOn tasks.deleteBuildDirectory
}

Task createZipTaskForHalInterface(String halInterfaceName, String compiledPath) {
    return tasks.create("jniZip${halInterfaceName.capitalize()}", Zip) {
        dependsOn build

        archiveFile.set(project.file("${project.buildDir}/haljni-${halInterfaceName}.zip"))
        archiveClassifier.set(halInterfaceName)

        from compiledPath
        rename ".*", "libhaljni.so"
    };
}

List<Task> createZipTasksForDefinedInterfaces() {
    List<Task> tasks = new ArrayList<>();

    String[] interfaces = CURRENT_INTERFACES.split(";")
    for (String interfaceName : interfaces) {
        Task task = createZipTaskForHalInterface(interfaceName,
                String.format(Locale.ENGLISH, BASE_OUTPUT_PATH_FORMAT, interfaceName))

        tasks.add(task);
    }

    return tasks;
}

task zipNatives {
    dependsOn createZipTasksForDefinedInterfaces()
}
