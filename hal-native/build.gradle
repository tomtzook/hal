plugins {
    id "io.github.tomtzook.gradle-cmake" version "1.2.1"
    id 'maven-publish'
    id 'signing'
}

apply from: rootProject.file('extras.gradle')

machines.customMachines.register("linux-gnueabihf-arm") {
    it.toolchainFile.set(rootProject.file('cmake-toolchain-files/arm-linux-gnueabihf-gcc.cmake'))
}

def compileMachineTargets = [machines.host]

if (project.hasProperty('crosscompile')) {
    compileMachineTargets.addAll(machines.customMachines)
}

def backends = [
    'bbb-usermode-sysfs': [
        'linux-gnueabihf-arm'
    ]
]

backends.forEach{ backend, arches ->
    def wantedMachines = arches.collect { archName ->
        machines.customMachines.getByName(archName)
    }

    cmake {
        targets {
            "hal_${backend}" {
                cmakeLists.set(file('src/main/CMakeLists.txt'))
                targetMachines.addAll(wantedMachines)
                cmakeArgs.addAll("-DHAL_INTERFACE=${backend}")
                generator.set(generators.ninja)
            }
        }
    }
}

tasks.clean.dependsOn tasks.cmakeClean
tasks.build.dependsOn tasks.cmakeBuild

publishing {
    repositories {
        maven {
            if (isReleaseBuild()) {
                name = 'NexusStaging'
                url = NEXUS_RELEASE_REPOSITORY_URL
            } else {
                name = 'NexusSnapshot'
                url = NEXUS_SNAPSHOT_REPOSITORY_URL
            }

            credentials {
                username getNexusUsername()
                password getNexusPassword()
            }
        }
    }
}

backends.forEach { backend, arches ->
    arches.forEach { archName ->
        def zipTask = tasks.register("zipNative_${backend}_${archName}", Zip) {
            dependsOn(tasks.cmakeBuild)

            def outputDir = cmake.outputDir.dir("hal_${backend}/${archName}")
            from (outputDir.map {
                return it.asFileTree.matching {
                    include '**/*hal*.dll'
                    include '**/*hal*.so'
                    include '**/*hal*.lib'
                    include '**/*hal*.a'
                    exclude '**/*hal_jni*'
                    exclude '**/CMakeFiles/**'
                }.files
            }) {
                into("/")
            }

            from (project.file('src/main/native/include')) {
                into('include')
            }

            archiveBaseName.set("${project.name}")
            archiveClassifier.set("${backend}_${archName}")
        }

        tasks.build.dependsOn(zipTask)
    }
}

publishing {
    publications {
        mavenNative(MavenPublication) {
            artifactId = "hal-native"

            backends.forEach { backend, arches ->
                arches.forEach { archName ->
                    artifact tasks."zipNative_${backend}_${archName}"
                }
            }

            pom {
                name = "hal-native"
                description = 'HAL shared and static libraries'
                url = 'https://github.com/tomtzook/hal'

                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = ' http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'tomtzook'
                        name = 'Tom Tzook'
                        email = 'tomtzook@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/tomtzook/hal.git'
                    developerConnection = 'scm:git:ssh://github.com/tomtzook/hal.git'
                    url = 'https://github.com/tomtzook/hal'
                }
            }
        }
    }
}

if (shouldSign()) {
    signing {
        sign publishing.publications.mavenJni
        sign publishing.publications.mavenNative
    }
}
